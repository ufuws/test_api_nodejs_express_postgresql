const BadRequest = require('../errors/BadRequest');

const pool = new (require('pg').Pool)({
    host: process.env.PGHOST,
    port: process.env.PGPORT,
    user: process.env.PGUSER,
    password: process.env.PASSWORD,
    database: process.env.DATABASE
});

pool.query('CREATE TABLE IF NOT EXISTS users(' +
    '_id INT UNIQUE GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,' +
    'name VARCHAR NOT NULL CHECK (length(name) > 1 AND length(name) < 51),' +
    'email VARCHAR UNIQUE NOT NULL CHECK (length(email) > 2 AND length(email) < 51),' +
    'password VARCHAR NOT NULL CHECK (length(password) = 60),' +
    'avatar VARCHAR CHECK (length(avatar) = 60)' +
    ')').then(() => {pool.query('ALTER SEQUENCE users__id_seq RESTART WITH 10000001');});

const create = ({ name, email, password }) => {
    return new Promise((resolve, reject) => {
        pool.query('INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING _id, email',
            [name, email, password],
            (err, res) => {
                if (!res) reject(err)
                else resolve(res.rows[0]);
            });
    });
};

const find = (findBy, dataQuery = ['email']) => {
    return new Promise((resolve, reject) => {
        const findDataKeys = Object.keys(findBy).map((key, index) => String(key + ' = $' + ++index));
        const findDataValues = Object.values(findBy);
        pool.query('SELECT ' + dataQuery.join(', ') + ' FROM users WHERE ' + findDataKeys.join(', '),
            findDataValues,
            (err, res) => {
                if (res.rowCount < 1) reject(err)
                else resolve(res.rows[0]);
            });
    });
};

const update = (_id, data) => {
    return new Promise((resolve, reject) => {
        const setKeys = Object.keys(data).map((key, index) => String(key + ' = $' + (index + 2)));
        const setValues = Object.values(data);
        setValues.unshift(_id);
        pool.query('UPDATE users SET ' + setKeys.join(', ') + ' WHERE _id = $1 RETURNING _id, email',
            setValues,
            (err, res) => {
                if (res.rowCount < 1) reject(err)
                else resolve(res.rows[0]);
            });
    });
};

module.exports = {
    create,
    find,
    update,
};